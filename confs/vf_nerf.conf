density{
    params_init{
        beta = 0.5,
        scale = 100.0,
        mean = 0.7,
    }
    beta_bounds = [1e-4, 1e9],
    mean_bounds = [0.6, 1.0]
    scale_min = 1.0
    cutoff = -2.0
}

vector_field_network{
    input_dims = 3,
    output_dims = 3,
    dimensions = [ 256, 256, 256, 256, 256, 256, 256, 256 ],
    feature_vector_dims = 256,
    embedder_multires = 6,
    weight_norm = False,
    batch_norm = True,
    skip_connection_in = [4],
    bias_init = 0.0,
    dropout = False,
    dropout_probability = 0.2,
    xavier_init = False,
}

rendering{
    output_dims = 3,
    dimensions = [ 256, 256, 256, 256],
    feature_vector_dims = 256,
    weight_norm = False,
    batch_norm = True,
    mode = "idr",
    embedder_multires = 4
    detach_normals = True,
}

ray_sampler{
    n_samples = 100
    n_importance = 30
    rays_per_batch = 1024
    perturb = True
    near = 0.0
    far = 1.0
    fine_range = 0.3
    increase_every = 50
    max_samples = 100
}

scheduler {
    lr = 5e-4
    lr_decay_factor = 0.1
    clip_norm = 0.5
    weight_decay = 0.0
}

fine_sampler{
    N_samples = 30,
    deterministic = False,
    pytest = False
}

vf_nerf{
    dir_to_normal_th = -2
    rendering = "volsdf"
    cos_sim_weights = [0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09],
    cos_sim_weights_anneal = "hard",
    normalize_rendering = True,
    anneal_start = 700
    anneal_end = 1400
    numerical_jacobian = False
    border_supervision = True
    center_supervision = True
}

loss{
    config{
        norm_smaller_than_one_start = 11000
        depth_loss_clamp = 0.5
        directional_derivatives_start = 100
    }
    weights{
        rgb = 2.0,
        depth = 0.5,
        unit_norm = 0.1,
        supervision = 1.0,
        norm_smaller_than_one = 0.1
        directional_derivatives = 0.00
    }
}


dataset {
    dataset_name = "replica" # scannet
    data_dir = "Replica" # ScanNet
    shuffle_views = True
    pixels_per_batch = 1024
    random_img_sampling = False
    border_radius = 0.15
}

supervised_loss_weights {
    surface = 2.0
    non_surface = 0.5 
    supervision = 10.0
    rgb = 0.0
    depth = 0.5
    unit_norm = 0.1
    similarity = 1.0
    colors = 1.0
    directional_derivatives = 0.0
}

train {
    num_epochs = 3001
    save_frequency = 100
    wandb_frequency = 1
    wandb_project = "vf_nerf"
    exps_folder = "./exps_vf_nerf"
}